/*
	Gramatica para Lenguaje Covid19
	Generada por Nissim Betesh y Alejandro Longoria
    
    Generar diagramas de sintaxis en 
    (https://www.bottlecaps.de/rr/ui)

*/

PROGRAMA  ::= 'program' 'id' ';' VARS? FUNCION* PRINCIPAL
VARS ::= 'var' (TIPO ':' LISTA_ID ';')+
LISTA_ID ::= ID_COMPLETO (',' ID_COMPLETO)*
ID_COMPLETO ::='id' DIMENSION? 
DIMENSION ::= ('[' VAR_CTE ']' ('[' VAR_CTE ']')? )?
TIPO ::= 'int' | 'float' | 'string' | 'char' | 'Dataframe'
FUNCION ::= 'function' TIPO_RETORNO 'module_name' '(' PARAMETROS? ')' VARS? '{' BLOQUE? '}'
TIPO_RETORNO ::= TIPO | 'void'
PARAMETROS ::= EXPRESION (',' EXPRESION)*
ESTATUTO ::= ASIGNACION | LLAMADA | RETORNO | LECTURA | ESCRITURA | CARGA_DATOS | DECISION | REPETICION
ASIGNACION ::= ID_COMPLETO '=' EXPRESION ';'
LLAMADA_VOID ::= 'module_name' '(' EXPRESION* ')' ';'
RETORNO ::= 'return' '(' EXP ')' ';'
LECTURA ::= 'read' '(' LISTA_ID ')' ';'
ESCRITURA ::= 'write' '(' (EXPRESION | CTE_S )+ ')' ';'
CARGA_DATOS ::= 'load' '(' 'id' ',' 'file_path' ',' VAR_CTE ',' VAR_CTE ')' ';'
MAIN ::= 'main' '(' ')' VARS '{' BLOQUE '}' 
DECISION ::= 'if' '(' EXPRESION ')' 'then' '{' ESTATUTO* '}' ( 'else' '{' ESTATUTO* '}' )?
REPETICION ::= CONDICIONAL | NO_CONDICIONAL
CONDICIONAL ::= 'while' '(' EXPRESION ')' 'do' '{' ESTATUTO* '}'
NO_CONDICIONAL ::= 'from' ID_COMPLETO '=' EXP 'to' EXP 'do' '{' ESTATUTO* '}'
VAR_CTE ::= 'id' | 'CTE_I' | 'CTE_F' | 'CTE_C' | 'CTE_S'
EXPRESION ::= ( EXP | LLAMADA) ( COMPARISON_OPS ( EXP | LLAMADA ) )?
COMPARISON_OPS ::= '<' | '>' | DIFF | EQUAL
EXP ::= TERMINO ( ( '+' | '-' ) TERMINO )*
TERMINO ::= FACTOR ( ('*' | '/') FACTOR )*
FACTOR ::= ( '(' EXPRESION ')' )  | ( ('+' | '-')? VAR_CTE)

LLAMADA ::= id '(' FUNC_USE_PARAMS ')'
FUNC_USE_PARAMS ::= (TIPO 'id' ',')*
CTE_STRING ::= ID | CTE_STRING